# Variables for deploying the application to aws
variables:
  DOCKER_REGISTRY: xxxxxxxxxxxxx.dkr.ecr.eu-csentral-1.amazonaws.com #ECR URL
  AWS_DEFAULT_REGION: eu-central-1 #AWS region
  APP_NAME: getmorecloud 
  DOCKER_HOST: tcp://docker:2375 #This will allow us to use the service docker:19-dind. Means that we use Docker in Docker to log in AWS in the before_script part.
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""


stages:
  - build
  - test
  - docker-build
#  - deploy

# ReactJS installing test stage 
build:
  stage: build
  image: node
  script:
    - echo "Start building App"
    - npm install
    - echo "Build successfully!"
  artifacts:
    expire_in: 1 hour
    paths:
      - node_modules/

# Application is running? 
test:
  stage: test
  image: node
  script:
    - echo "Testing App"
    - CI=true npm test
    - echo "Test successfully!"

# Containerization test. If success, push contianer to GitLab Container registery
docker-build:
  stage: docker-build
  image: docker:latest
  services:
    - name: docker:19.03.8-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"

# If there is no problem until this step, we can send it to AWS. I put credential to GitLab as Variable
# publish:
#   stage: deploy
#   image:
#     name: docker:latest
#   services:
#     - docker:19-dind
#   before_script:
#     - apk add --no-cache curl jq python3 py3-pip
#     - pip install awscli
#     - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
#     - aws --version
#     - docker info
#     - docker --version
#   script:
#     - docker build -t $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID .
#     - docker push $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID

